<wizard>
		<step id="start" nextstep="introduction">
			<text value="Welcome.\n\nThis start wizard will guide you through the basic setup of your receiver.\nPress the OK button on your remote control to move to the next step." />
			<code>
self.clearSelectedKeys()
self.selectKey("OK")
			</code>
		</step>
                <step id="vti_helper">
			<text value="You can now use VTi ZerO to remove some packages which you do not need.\n\nYou can now also use VTi BackupSuite to restore your previously saved settings, plugins or favourite bouquets ?" />
			<list>
				<listentry caption="Next step" step="introduction" />
				<listentry caption="Remove not needed packages (VTi ZerO)" step="vti_helper" />
				<listentry caption="Restore configuration (VTi BackupSuite)" step="vti_helper" />
			</list>
			<code>
self.clearSelectedKeys()
self.selectKey("UP")
self.selectKey("DOWN")
			</code>
			<code pos="after">
if self["list"].index == 1:
	from Plugins.SystemPlugins.VTIPanel.VTiZerO import VTiZerO
	self.session.open(VTiZerO, "/usr/lib/enigma2/python/Plugins/SystemPlugins/VTIPanel", True)
elif self["list"].index == 2:
	from Plugins.SystemPlugins.VTIPanel.BackupSuite import BackupSuite
	self.session.open(BackupSuite, "/usr/lib/enigma2/python/Plugins/SystemPlugins/VTIPanel", "restore")
			</code>
		</step>
		<step id="introduction" >
			<text value="Use the up/down keys on your remote control to select an option. After that, press OK." />
			<list>
				<listentry caption="Use the wizard to set up basic features" step="network" />
				<listentry caption="Exit the wizard" step="end" />
			</list>
			<code>
self.clearSelectedKeys()
self.selectKey("UP")
self.selectKey("DOWN")
			</code>
		</step>
		<step id="network" >
			<text value="Please connect your receiver to the internet" />
			<list>
				<listentry caption="Check the internet connection" step="update" />
				<listentry caption="Skip internet connection check (disables automatic package installation)" step="nima" />
			</list>
			<code>
self.clearSelectedKeys()
self.selectKey("UP")
self.selectKey("DOWN")
			</code>
		</step>
		<step id="update">
			<text value="Checking the internet connection" />
			<config screen="InstallWizard" module="InstallWizard" args="0" type="ConfigList" />
			<code>
self.clearSelectedKeys()
self.selectKey("OK")
			</code>
		</step>
		<step id="networkfailed" >
			<condition>
self.condition = not config.misc.installwizard.ipkgloaded.value
			</condition>
			<text value="Your receiver does not have an internet connection" />
			<list>
				<listentry caption="Check the internet connection again" step="update" />
				<listentry caption="Skip internet connection check (disables automatic package installation)" step="nima" />
			</list>
			<code>
self.clearSelectedKeys()
self.selectKey("UP")
self.selectKey("DOWN")
			</code>
		</step>
		<step id="nima">
			<condition>
from Components.NimManager import nimmanager
self.condition = len(nimmanager.nim_slots) > 0 and not nimmanager.nim_slots[0].empty
			</condition>
			<text value="Please set up tuner A" />
			<config screen="NimSetup" module="Satconfig" args="0" type="ConfigList" />
			<code>
self.clearSelectedKeys()
self.selectKey("LEFT")
self.selectKey("RIGHT")
			</code>
		</step>
		<step id="nimb">
			<condition>
from Components.NimManager import nimmanager
self.condition = len(nimmanager.nim_slots) > 1 and not nimmanager.nim_slots[1].empty
			</condition>
			<text value="Please set up tuner B" />
			<config screen="NimSetup" module="Satconfig" args="1" type="ConfigList" />
			<code>
self.clearSelectedKeys()
self.selectKey("LEFT")
self.selectKey("RIGHT")
			</code>
		</step>
		<step id="nimc">
			<condition>
from Components.NimManager import nimmanager
self.condition = len(nimmanager.nim_slots) > 2 and not nimmanager.nim_slots[2].empty and not nimmanager.nim_slots[2].isFBCLink()
			</condition>
			<text value="Please set up tuner C" />
			<config screen="NimSetup" module="Satconfig" args="2" type="ConfigList" />
			<code>
self.clearSelectedKeys()
self.selectKey("LEFT")
self.selectKey("RIGHT")
			</code>
		</step>
		<step id="nimd">
			<condition>
from Components.NimManager import nimmanager
self.condition = len(nimmanager.nim_slots) > 3 and not nimmanager.nim_slots[3].empty and not nimmanager.nim_slots[3].isFBCLink()
			</condition>
			<text value="Please set up tuner D" />
			<config screen="NimSetup" module="Satconfig" args="3" type="ConfigList" />
			<code>
self.clearSelectedKeys()
self.selectKey("LEFT")
self.selectKey("RIGHT")
			</code>
		</step>
		<step id="nime">
			<condition>
from Components.NimManager import nimmanager
self.condition = len(nimmanager.nim_slots) > 4 and not nimmanager.nim_slots[4].empty and not nimmanager.nim_slots[4].isFBCLink()
			</condition>
			<text value="Please set up tuner E" />
			<config screen="NimSetup" module="Satconfig" args="4" type="ConfigList" />
			<code>
self.clearSelectedKeys()
self.selectKey("LEFT")
self.selectKey("RIGHT")
			</code>
		</step>
		<step id="nimf">
			<condition>
from Components.NimManager import nimmanager
self.condition = len(nimmanager.nim_slots) > 5 and not nimmanager.nim_slots[5].empty and not nimmanager.nim_slots[5].isFBCLink()
			</condition>
			<text value="Please set up tuner F" />
			<config screen="NimSetup" module="Satconfig" args="5" type="ConfigList" />
			<code>
self.clearSelectedKeys()
self.selectKey("LEFT")
self.selectKey("RIGHT")
			</code>
		</step>
		<step id="nimg">
			<condition>
from Components.NimManager import nimmanager
self.condition = len(nimmanager.nim_slots) > 6 and not nimmanager.nim_slots[6].empty and not nimmanager.nim_slots[6].isFBCLink()
			</condition>
			<text value="Please set up tuner G" />
			<config screen="NimSetup" module="Satconfig" args="6" type="ConfigList" />
			<code>
self.clearSelectedKeys()
self.selectKey("LEFT")
self.selectKey("RIGHT")
			</code>
		</step>
		<step id="nimh">
			<condition>
from Components.NimManager import nimmanager
self.condition = len(nimmanager.nim_slots) > 7 and not nimmanager.nim_slots[7].empty and not nimmanager.nim_slots[7].isFBCLink()
			</condition>
			<text value="Please set up tuner H" />
			<config screen="NimSetup" module="Satconfig" args="7" type="ConfigList" />
			<code>
self.clearSelectedKeys()
self.selectKey("LEFT")
self.selectKey("RIGHT")
			</code>
		</step>
		<step id="nimi">
			<condition>
from Components.NimManager import nimmanager
self.condition = len(nimmanager.nim_slots) > 8 and not nimmanager.nim_slots[8].empty and not nimmanager.nim_slots[8].isFBCLink()
			</condition>
			<text value="Please set up tuner I" />
			<config screen="NimSetup" module="Satconfig" args="8" type="ConfigList" />
			<code>
self.clearSelectedKeys()
self.selectKey("LEFT")
self.selectKey("RIGHT")
			</code>
		</step>
		<step id="nimj">
			<condition>
from Components.NimManager import nimmanager
self.condition = len(nimmanager.nim_slots) > 9 and not nimmanager.nim_slots[9].empty and not nimmanager.nim_slots[9].isFBCLink()
			</condition>
			<text value="Please set up tuner J" />
			<config screen="NimSetup" module="Satconfig" args="9" type="ConfigList" />
			<code>
self.clearSelectedKeys()
self.selectKey("LEFT")
self.selectKey("RIGHT")
			</code>
		</step>
		<step id="nimk">
			<condition>
from Components.NimManager import nimmanager
self.condition = len(nimmanager.nim_slots) > 10 and not nimmanager.nim_slots[10].empty and not nimmanager.nim_slots[10].isFBCLink()
			</condition>
			<text value="Please set up tuner K" />
			<config screen="NimSetup" module="Satconfig" args="10" type="ConfigList" />
			<code>
self.clearSelectedKeys()
self.selectKey("LEFT")
self.selectKey("RIGHT")
			</code>
		</step>
		<step id="channels">
			<condition>
from Components.NimManager import nimmanager
self.condition = nimmanager.somethingConnected() and config.misc.installwizard.hasnetwork.value and config.misc.installwizard.ipkgloaded.value
			</condition>
			<text value="Do you want to install a channel list?" />
			<config screen="InstallWizard" module="InstallWizard" args="1" type="ConfigList" />
			<code>
self.clearSelectedKeys()
self.selectKey("LEFT")
self.selectKey("RIGHT")
			</code>
		</step>
		<step id="scanquestion">
			<text value="Do you want to do a service scan?" />
			<condition>
from Components.NimManager import nimmanager
self.condition = nimmanager.somethingConnected() and not config.misc.installwizard.channellistdownloaded.value
			</condition>
			<code>
self.hideRc()
			</code>
			<list>
				<listentry caption="No" step="finisheddefaultsatlists" />
				<listentry caption="Yes, do an automatic scan now" step="scan" />
				<listentry caption="Yes, do a manual scan now" step="manualscan" />
			</list>
		</step>
		<step id="scan" nextstep="finisheddefaultsatlists">
			<condition>
from Components.NimManager import nimmanager
self.condition = nimmanager.somethingConnected() and not config.misc.installwizard.channellistdownloaded.value
			</condition>
			<text value="What do you want to scan?" />
			<config screen="ScanSimple" module="ScanSetup" type="ConfigList" />
		</step>
		<step id="manualscan">
			<condition>
from Components.NimManager import nimmanager
self.condition = nimmanager.somethingConnected() and not config.misc.installwizard.channellistdownloaded.value
			</condition>
			<text value="What do you want to scan?" />
			<config screen="ScanSetup" module="ScanSetup" type="ConfigList" />
		</step>
		<step id="nextscan">
			<condition>
from Components.NimManager import nimmanager
self.condition = nimmanager.somethingConnected() and not config.misc.installwizard.channellistdownloaded.value
			</condition>
			<text value="Do you want to do another manual service scan?" />
			<list>
				<listentry caption="No" step="finisheddefaultsatlists" />
				<listentry caption="Yes, do another manual scan now" step="manualscan" />
			</list>
		</step>
                <step id="finisheddefaultsatlists">
			<text value="Do you want to enable the parental control feature on your reciver?" />
			<list>
				<listentry caption="Yes" step="parentalsetup" />
				<listentry caption="No" step="end" />
			</list>
			<code pos="after">
if self["list"].index == 0:
	config.ParentalControl.configured.value = True
else:
	config.ParentalControl.configured.value = False
config.ParentalControl.configured.save()
			</code>
		</step>
		<step id="parentalsetup">
			<text value="You need to set a PIN code and hide it from your children.\n\nDo you want to set the pin now?" />
			<list>
				<listentry caption="Yes" step="finishparentalsetup" />
				<listentry caption="No" step="warnpin" />
			</list>
			<code pos="after">
from ParentalControlSetup import ParentalControlChangePin
if self["list"].index == 0:
	self.session.open(ParentalControlChangePin, config.ParentalControl.servicepin[0], _("parental control pin"))
			</code>
		</step>
		<step id="warnpin">
			<text value="Please be aware, that anyone can disable the parental control, if you have not set a PIN." />
		</step>
		<step id="finishparentalsetup">
			<code>
if config.ParentalControl.setuppin.value == "aaaa":
	config.ParentalControl.setuppinactive.value = False
else:
	config.ParentalControl.setuppinactive.value = True
config.ParentalControl.setuppinactive.save()
config.ParentalControl.servicepinactive.value = True
config.ParentalControl.servicepinactive.save()
config.ParentalControl.setuppin.value = config.ParentalControl.servicepin[0].value
config.ParentalControl.setuppin.save()
			</code>

			<text value="After the start wizard is completed, you need to protect single services. Refer to your STB's manual on how to do that." />

		</step>
		<step id="vti_timeshift">
			<condition>
from Components.UsageConfig import is_preferredTimeshiftPath_OK
self.condition = is_preferredTimeshiftPath_OK() and True or False
			</condition>
			<text value="Do you want timeshift to be actviated automatically (permanent timeshift) ?" />
			<list>
				<listentry caption="No" step="channel_button_config" />
				<listentry caption="Yes" step="vti_timeshift_activated" />
			</list>
			<code>
self.clearSelectedKeys()
self.selectKey("UP")
self.selectKey("DOWN")
			</code>
			<code pos="after">
if self["list"].index == 1:
	config.usage.ts_min_duration.value = "2"
	config.usage.ts_show_old_ts.value = True
	config.usage.ts_clean_intervall.value = "4"
	config.usage.ts_auto_start.value = "10"
	config.usage.ts_ask_before_service_changed.value = "keep_ts"
	config.usage.ts_use_history_keys.value = True
	config.usage.movielist_hide_timeshift_files.value = True
			</code>
		</step>
	<step id="vti_timeshift_activated">
			<condition>
from Components.UsageConfig import is_preferredTimeshiftPath_OK
self.condition = is_preferredTimeshiftPath_OK() and True or False
			</condition>
			<text value="Use the left and right buttons to change an option.\n\nPlease configure timeshift options:" />
			<config screen="Setup" module="Setup" args="'vti_timeshift'" type="ConfigList" />
			<code>
self.clearSelectedKeys()
self.selectKey("LEFT")
self.selectKey("RIGHT")
			</code>
			<code pos="after">
config.usage.ts_min_duration.save()
config.usage.ts_show_old_ts.save()
config.usage.ts_use_history_keys.save()
config.usage.ts_clean_intervall.save()
config.usage.ts_clean_ts_older_than.save()
config.usage.ts_auto_start.save()
config.usage.ts_ask_before_service_changed.save()
config.usage.movielist_hide_timeshift_files.save()
config.usage.ts_event_change.save()
			</code>
		</step>
		<step id="channel_button_config">
			<condition>
import os
self.condition = os.path.exists('/usr/lib/enigma2/python/Plugins/Extensions/GraphMultiEPG/plugin.py') and True or False
			</condition>
			<text value="Do you want to change channels with Channel +/- buttons?" />
			<list>
				<listentry caption="No" step="epg_button_config_w_gmpeg" />
				<listentry caption="Yes" step="epg_button_config_w_gmpeg" />
			</list>
			<code>
self.clearSelectedKeys()
self.selectKey("BOUQUET-")
self.selectKey("BOUQUET+")
			</code>
			<code pos="after">
if self["list"].index == 0:
	config.usage.channelzap_w_bouquet.value = False
elif self["list"].index == 1:
	config.usage.channelzap_w_bouquet.value = True
config.usage.channelzap_w_bouquet.save()
			</code>
		</step>
		<step id="epg_button_config_w_gmpeg">
			<condition>
import os
self.condition = os.path.exists('/usr/lib/enigma2/python/Plugins/Extensions/GraphMultiEPG/plugin.py') and True or False
			</condition>
			<text value="Please select your preferred EPG view" />
			<list>
				<listentry caption="Event Description" step="rec_button_config" />
				<listentry caption="Single Service EPG" step="rec_button_config" />
				<listentry caption="Multi EPG" step="rec_button_config" />
				<listentry caption="Service EPGBar" step="rec_button_config" />
				<listentry caption="Graphical Multi EPG" step="rec_button_config" />
			</list>
			<code>
self.clearSelectedKeys()
self.selectKey("INFO")
			</code>
			<code pos="after">
if self["list"].index == 0:
	config.usage.epg_default_view.value = "eventview"
elif self["list"].index == 1:
	config.usage.epg_default_view.value = "singleepg"
elif self["list"].index == 2:
	config.usage.epg_default_view.value = "multiepg"
elif self["list"].index == 3:
	config.usage.epg_default_view.value = "epgbar"
elif self["list"].index == 4:
	config.usage.epg_default_view.value = "graphicalmultiepg"
config.usage.epg_default_view.save()
			</code>
		</step>
		<step id="epg_button_config_wo_gmpeg">
			<text value="Please select your preferred EPG view" />
			<list>
				<listentry caption="Event Description" step="rec_button_config" />
				<listentry caption="Single Service EPG" step="rec_button_config" />
				<listentry caption="Multi EPG" step="rec_button_config" />
				<listentry caption="Service EPGBar" step="rec_button_config" />
			</list>
			<code>
self.clearSelectedKeys()
self.selectKey("INFO")
			</code>
			<code pos="after">
if self["list"].index == 0:
	config.usage.epg_default_view.value = "eventview"
elif self["list"].index == 1:
	config.usage.epg_default_view.value = "singleepg"
elif self["list"].index == 2:
	config.usage.epg_default_view.value = "multiepg"
elif self["list"].index == 3:
	config.usage.epg_default_view.value = "epgbar"
config.usage.epg_default_view.save()
			</code>
		</step>
		<step id="rec_button_config">
			<condition>
from Components.UsageConfig import is_preferredInstantRecordPath_OK
self.condition = is_preferredInstantRecordPath_OK() and True or False
			</condition>
			<text value="Please configure function for short keypress of REC button" />
			<list>
				<listentry caption="show record menu" step="exit_button_long_config" />
				<listentry caption="show running records" step="exit_button_long_config" />
				<listentry caption="show timer list" step="exit_button_long_config" />
				<listentry caption="add recording (stop after current event)" step="exit_button_long_config" />
				<listentry caption="add recording (indefinitely)" step="exit_button_long_config" />
				<listentry caption="add recording (enter recording duration)" step="exit_button_long_config" />
				<listentry caption="add recording (enter recording endtime)" step="exit_button_long_config" />
				<listentry caption="Transform Timeshift into recording" step="exit_button_long_config" />
			</list>
			<code>
self.clearSelectedKeys()
self.selectKey("RECORD")
			</code>
			<code pos="after">
if self["list"].index == 0:
	config.usage.rec_button.value = "record_menu"
elif self["list"].index == 1:
	config.usage.rec_button.value = "running_record"
elif self["list"].index == 2:
	config.usage.rec_button.value = "timer_list"
elif self["list"].index == 3:
	config.usage.rec_button.value = "event_record"
elif self["list"].index == 4:
	config.usage.rec_button.value = "indefinitely_record"
elif self["list"].index == 5:
	config.usage.rec_button.value = "manualduration_record"
elif self["list"].index == 6:
	config.usage.rec_button.value = "manualendtime_record"
elif self["list"].index == 7:
	config.usage.rec_button.value = "timeshift_to_record"
config.usage.rec_button.save()
			</code>
		</step>
		<step id="exit_button_long_config">
			<condition>
from Components.SystemInfo import SystemInfo
self.condition = SystemInfo["CanPiP"] and True or False
			</condition>
			<text value="Please configure function for long keypress of Exit button" />
			<list>
				<listentry caption="Split Screen" step="power_button_config" />
				<listentry caption="Picture in Picture" step="power_button_config" />
				<listentry caption="Audio Zap" step="power_button_config" />
			</list>
			<code>
self.clearSelectedKeys()
self.selectKey("EXIT")
			</code>
			<code pos="after">
if self["list"].index == 0:
	config.usage.default_pip_mode.value = "splitscreen"
elif self["list"].index == 1:
	config.usage.default_pip_mode.value = "pip"
elif self["list"].index == 2:
	config.usage.default_pip_mode.value = "audiozap"
config.usage.default_pip_mode.save()
			</code>
		</step>
		<step id="power_button_config">
			<text value="Please configure function for short keypress of Power button" />
			<list>
				<listentry caption="Standby" step="skinselector" />
				<listentry caption="show shutdown menu" step="skinselector" />
				<listentry caption="immediate shutdown" step="skinselector" />
				<listentry caption="Restart" step="skinselector" />
				<listentry caption="Restart GUI" step="skinselector" />
				<listentry caption="do nothing" step="skinselector" />
			</list>
			<code>
self.clearSelectedKeys()
self.selectKey("POWER")
			</code>
			<code pos="after">
if self["list"].index == 0:
	config.usage.on_short_powerpress.value = "standby"
elif self["list"].index == 1:
	config.usage.on_short_powerpress.value = "show_menu"
elif self["list"].index == 2:
	config.usage.on_short_powerpress.value = "shutdown"
elif self["list"].index == 3:
	config.usage.on_short_powerpress.value = "restart"
elif self["list"].index == 4:
	config.usage.on_short_powerpress.value = "restart_gui"
elif self["list"].index == 5:
	config.usage.on_short_powerpress.value = "nothing"
config.usage.on_short_powerpress.save()
			</code>
		</step>
		<step id="skinselector">
			<text value="You can now choose your preferred skin.\nDo you want to change default skin?" />
			<list>
				<listentry caption="No" step="end" />
				<listentry caption="Yes" step="end" />
			</list>
			<code pos="after">
if self["list"].index == 1:
	import os.path
	from Plugins.SystemPlugins.SkinSelector.plugin import SkinSelector
	self.session.open(SkinSelector)
			</code>
		</step>
		<step id="end" laststep="true">
			<condition>
self.condition = self.isLastWizard
			</condition>
			<text value="Thank you for using the wizard. Your box is now ready to use.\nPlease press OK to start using your STB." />

		</step>
</wizard>

